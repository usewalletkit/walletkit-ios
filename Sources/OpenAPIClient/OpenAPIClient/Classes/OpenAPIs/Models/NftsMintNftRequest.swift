//
// NftsMintNftRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NftsMintNftRequest: Codable, JSONEncodable, Hashable {

    public var network: Network
    /** address of the NFT collection smart contract to mint from. */
    public var contractAddress: String
    /** wallet address where the NFT should be delivered. defaults to the sender's address. */
    public var recipient: String?
    public var metadata: MintNftRequestMetadata?
    /** uri the the nft metadata.json, schema define in https://eips.ethereum.org/EIPS/eip-721#specification. Use the metadata field instead if the metadata.json doesn't exist and needs to be created and hosted. */
    public var uri: String?
    /** On testnet, the developer_secret is always \"testnet-secret\". On mainnet, the developer_secret is set by the developer during account activation. */
    public var developerSecret: String?
    /** A 6-digit numeric pin that is only known to the user, set during  wallet creation. This pin is required to sign transactions from  this wallet. */
    public var userPin: String?

    public init(network: Network, contractAddress: String, recipient: String? = nil, metadata: MintNftRequestMetadata? = nil, uri: String? = nil, developerSecret: String? = nil, userPin: String? = nil) {
        self.network = network
        self.contractAddress = contractAddress
        self.recipient = recipient
        self.metadata = metadata
        self.uri = uri
        self.developerSecret = developerSecret
        self.userPin = userPin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case network
        case contractAddress = "contract_address"
        case recipient
        case metadata
        case uri
        case developerSecret = "developer_secret"
        case userPin = "user_pin"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(network, forKey: .network)
        try container.encode(contractAddress, forKey: .contractAddress)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(developerSecret, forKey: .developerSecret)
        try container.encodeIfPresent(userPin, forKey: .userPin)
    }
}

