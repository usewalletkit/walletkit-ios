//
// ContractMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ContractMetadata: Codable, JSONEncodable, Hashable {

    public var network: Network
    public var address: String
    public var type: ContractType
    public var name: String?
    public var logoUrl: String?
    public var token: Token?
    public var nft: NftCollection?

    public init(network: Network, address: String, type: ContractType, name: String? = nil, logoUrl: String? = nil, token: Token? = nil, nft: NftCollection? = nil) {
        self.network = network
        self.address = address
        self.type = type
        self.name = name
        self.logoUrl = logoUrl
        self.token = token
        self.nft = nft
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case network
        case address
        case type
        case name
        case logoUrl = "logo_url"
        case token
        case nft
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(network, forKey: .network)
        try container.encode(address, forKey: .address)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encodeIfPresent(nft, forKey: .nft)
    }
}

