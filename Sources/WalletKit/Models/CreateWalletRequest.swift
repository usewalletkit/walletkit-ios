//
// CreateWalletRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateWalletRequest: Codable, JSONEncodable, Hashable {

    public var network: Network
    public var name: String
    /** An ID that you can use to associate the wallet with a user in your application. e.g. user uuid. When creating wallets for the same owner_id across different networks, the same seed phrase will be used. */
    public var ownerId: String?
    public var controlMode: WalletControlMode
    /** On testnet, the developer_secret is always \"testnet-secret\". On mainnet, the developer_secret is set by the developer during account activation. */
    public var developerSecret: String?
    /** A 6-digit numeric pin that is only known to the user, set during  wallet creation. This pin is required to sign transactions from  this wallet. */
    public var userPin: String?

    public init(network: Network, name: String, ownerId: String? = nil, controlMode: WalletControlMode, developerSecret: String? = nil, userPin: String? = nil) {
        self.network = network
        self.name = name
        self.ownerId = ownerId
        self.controlMode = controlMode
        self.developerSecret = developerSecret
        self.userPin = userPin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case network
        case name
        case ownerId = "owner_id"
        case controlMode = "control_mode"
        case developerSecret = "developer_secret"
        case userPin = "user_pin"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(network, forKey: .network)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encode(controlMode, forKey: .controlMode)
        try container.encodeIfPresent(developerSecret, forKey: .developerSecret)
        try container.encodeIfPresent(userPin, forKey: .userPin)
    }
}

