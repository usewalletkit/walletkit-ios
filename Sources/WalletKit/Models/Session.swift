//
// Session.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Session: Codable, JSONEncodable, Hashable {

    public var id: String
    public var createdAt: Date
    public var projectId: String
    public var userId: String
    public var accessToken: String
    public var accessTokenExpiresAt: Date
    public var refreshToken: String
    public var refreshTokenExpiresAt: Date

    public init(id: String, createdAt: Date, projectId: String, userId: String, accessToken: String, accessTokenExpiresAt: Date, refreshToken: String, refreshTokenExpiresAt: Date) {
        self.id = id
        self.createdAt = createdAt
        self.projectId = projectId
        self.userId = userId
        self.accessToken = accessToken
        self.accessTokenExpiresAt = accessTokenExpiresAt
        self.refreshToken = refreshToken
        self.refreshTokenExpiresAt = refreshTokenExpiresAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt = "created_at"
        case projectId = "project_id"
        case userId = "user_id"
        case accessToken = "access_token"
        case accessTokenExpiresAt = "access_token_expires_at"
        case refreshToken = "refresh_token"
        case refreshTokenExpiresAt = "refresh_token_expires_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(projectId, forKey: .projectId)
        try container.encode(userId, forKey: .userId)
        try container.encode(accessToken, forKey: .accessToken)
        try container.encode(accessTokenExpiresAt, forKey: .accessTokenExpiresAt)
        try container.encode(refreshToken, forKey: .refreshToken)
        try container.encode(refreshTokenExpiresAt, forKey: .refreshTokenExpiresAt)
    }
}

