//
// WalletsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WalletsAPI {

    /**
     Change User Pin
     
     - parameter changeUserPinRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsChangeUserPin(changeUserPinRequest: ChangeUserPinRequest, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: ChangeUserPinResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsChangeUserPinWithRequestBuilder(changeUserPinRequest: changeUserPinRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Change User Pin
     - POST /wallets/change-user-pin
     - Change pin for user controlled wallets
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter changeUserPinRequest: (body)  
     - returns: RequestBuilder<ChangeUserPinResponse> 
     */
    open class func walletsChangeUserPinWithRequestBuilder(changeUserPinRequest: ChangeUserPinRequest) -> RequestBuilder<ChangeUserPinResponse> {
        let localVariablePath = "/wallets/change-user-pin"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changeUserPinRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ChangeUserPinResponse>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Wallet
     
     - parameter createWalletRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsCreate(createWalletRequest: CreateWalletRequest, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: CreateWalletResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsCreateWithRequestBuilder(createWalletRequest: createWalletRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Wallet
     - POST /wallets
     - Creates a wallet with provided metadata.
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter createWalletRequest: (body)  
     - returns: RequestBuilder<CreateWalletResponse> 
     */
    open class func walletsCreateWithRequestBuilder(createWalletRequest: CreateWalletRequest) -> RequestBuilder<CreateWalletResponse> {
        let localVariablePath = "/wallets"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createWalletRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateWalletResponse>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Export Wallet
     
     - parameter exportWalletRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsExport(exportWalletRequest: ExportWalletRequest, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: ExportWalletResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsExportWithRequestBuilder(exportWalletRequest: exportWalletRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Export Wallet
     - POST /wallets/export
     - Export wallet mnemonic phrase
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter exportWalletRequest: (body)  
     - returns: RequestBuilder<ExportWalletResponse> 
     */
    open class func walletsExportWithRequestBuilder(exportWalletRequest: ExportWalletRequest) -> RequestBuilder<ExportWalletResponse> {
        let localVariablePath = "/wallets/export"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: exportWalletRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExportWalletResponse>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Wallet by Address
     
     - parameter network: (query)  
     - parameter address: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsGetByAddress(network: Network, address: String, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: Wallet?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsGetByAddressWithRequestBuilder(network: network, address: address).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Wallet by Address
     - GET /wallets/get-by-address
     - Get a wallet by network and address
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter network: (query)  
     - parameter address: (query)  
     - returns: RequestBuilder<Wallet> 
     */
    open class func walletsGetByAddressWithRequestBuilder(network: Network, address: String) -> RequestBuilder<Wallet> {
        let localVariablePath = "/wallets/get-by-address"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "network": (wrappedValue: network.encodeToJSON(), isExplode: true),
            "address": (wrappedValue: address.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Wallet>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Wallet by ID
     
     - parameter network: (query)  
     - parameter id: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsGetById(network: Network, id: String, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: Wallet?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsGetByIdWithRequestBuilder(network: network, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Wallet by ID
     - GET /wallets/get-by-id
     - Get a wallet by id
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter network: (query)  
     - parameter id: (query)  
     - returns: RequestBuilder<Wallet> 
     */
    open class func walletsGetByIdWithRequestBuilder(network: Network, id: String) -> RequestBuilder<Wallet> {
        let localVariablePath = "/wallets/get-by-id"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "network": (wrappedValue: network.encodeToJSON(), isExplode: true),
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Wallet>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get User Wallet by Network
     
     - parameter network: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsGetByNetwork(network: Network, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: Wallet?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsGetByNetworkWithRequestBuilder(network: network).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get User Wallet by Network
     - GET /wallets/get-by-network
     - Get a wallet for a user by network
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter network: (query)  
     - returns: RequestBuilder<Wallet> 
     */
    open class func walletsGetByNetworkWithRequestBuilder(network: Network) -> RequestBuilder<Wallet> {
        let localVariablePath = "/wallets/get-by-network"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "network": (wrappedValue: network.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Wallet>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Wallet by Owner ID
     
     - parameter network: (query)  
     - parameter ownerID: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsGetByOwnerId(network: Network, ownerID: String, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: Wallet?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsGetByOwnerIdWithRequestBuilder(network: network, ownerID: ownerID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Wallet by Owner ID
     - GET /wallets/get-by-owner-id
     - Get a wallet by network and owner id
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter network: (query)  
     - parameter ownerID: (query)  
     - returns: RequestBuilder<Wallet> 
     */
    open class func walletsGetByOwnerIdWithRequestBuilder(network: Network, ownerID: String) -> RequestBuilder<Wallet> {
        let localVariablePath = "/wallets/get-by-owner-id"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "network": (wrappedValue: network.encodeToJSON(), isExplode: true),
            "ownerID": (wrappedValue: ownerID.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Wallet>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List Wallets
     
     - parameter network: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func walletsList(network: Network? = nil, page: Int? = nil, pageSize: String? = nil, apiResponseQueue: DispatchQueue = WalletKitAPI.apiResponseQueue, completion: @escaping ((_ data: [ListWalletsResponseItem]?, _ error: Error?) -> Void)) -> RequestTask {
        return walletsListWithRequestBuilder(network: network, page: page, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Wallets
     - GET /wallets
     - Lists wallets created in the project. Supports filter by network.
     - Bearer Token:
       - type: http
       - name: BearerAuth
     - parameter network: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - returns: RequestBuilder<[ListWalletsResponseItem]> 
     */
    open class func walletsListWithRequestBuilder(network: Network? = nil, page: Int? = nil, pageSize: String? = nil) -> RequestBuilder<[ListWalletsResponseItem]> {
        let localVariablePath = "/wallets"
        let localVariableURLString = WalletKitAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "network": (wrappedValue: network?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ListWalletsResponseItem]>.Type = WalletKitAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
