//
// ListWalletActivityResponseItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ListWalletActivityResponseItem: Codable, JSONEncodable, Hashable {

    public var uuid: String
    public var network: Network
    public var type: String
    public var timestamp: String
    public var walletAddress: String
    public var transactionHash: String
    public var metadata: ListWalletActivityResponseItemMetadata
    public var token: ListWalletActivityResponseItemToken

    public init(uuid: String, network: Network, type: String, timestamp: String, walletAddress: String, transactionHash: String, metadata: ListWalletActivityResponseItemMetadata, token: ListWalletActivityResponseItemToken) {
        self.uuid = uuid
        self.network = network
        self.type = type
        self.timestamp = timestamp
        self.walletAddress = walletAddress
        self.transactionHash = transactionHash
        self.metadata = metadata
        self.token = token
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case network
        case type
        case timestamp
        case walletAddress = "wallet_address"
        case transactionHash = "transaction_hash"
        case metadata
        case token = "Token"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(network, forKey: .network)
        try container.encode(type, forKey: .type)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(walletAddress, forKey: .walletAddress)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(token, forKey: .token)
    }
}

