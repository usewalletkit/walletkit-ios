//
// TokensCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TokensCreateRequest: Codable, JSONEncodable, Hashable {

    public var network: Network
    public var name: String
    public var symbol: String
    /** Specify how many decimals places a token has. E.g. To be able to transfer 1.5 XYZ token, decimals must be at least 1 since that number has a single decimal places. */
    public var decimals: String
    /** Decimals to display on WalletKit dashboard. */
    public var displayDecimals: String?
    /** url of the token logo. */
    public var logoUrl: String?
    /** The amount of tokens to be minted to the token creator. */
    public var initialSupply: String
    /** On testnet, the developer_secret is always \"testnet-secret\". On mainnet, the developer_secret is set by the developer during account activation. */
    public var developerSecret: String?
    /** A 6-digit numeric pin that is only known to the user, set during  wallet creation. This pin is required to sign transactions from  this wallet. */
    public var userPin: String?

    public init(network: Network, name: String, symbol: String, decimals: String, displayDecimals: String? = nil, logoUrl: String? = nil, initialSupply: String, developerSecret: String? = nil, userPin: String? = nil) {
        self.network = network
        self.name = name
        self.symbol = symbol
        self.decimals = decimals
        self.displayDecimals = displayDecimals
        self.logoUrl = logoUrl
        self.initialSupply = initialSupply
        self.developerSecret = developerSecret
        self.userPin = userPin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case network
        case name
        case symbol
        case decimals
        case displayDecimals = "display_decimals"
        case logoUrl = "logo_url"
        case initialSupply = "initial_supply"
        case developerSecret = "developer_secret"
        case userPin = "user_pin"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(network, forKey: .network)
        try container.encode(name, forKey: .name)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(decimals, forKey: .decimals)
        try container.encodeIfPresent(displayDecimals, forKey: .displayDecimals)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encode(initialSupply, forKey: .initialSupply)
        try container.encodeIfPresent(developerSecret, forKey: .developerSecret)
        try container.encodeIfPresent(userPin, forKey: .userPin)
    }
}

